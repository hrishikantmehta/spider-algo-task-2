https://www.geeksforgeeks.org/c-program-for-reverse-a-linked-list/

#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node* next;
};

struct node* head;

void insertIntoLL(char name[])
{
    struct node* prevNode;
    struct node* newNode;
    if(head==NULL)
    {
        int i=1;
        newNode=(struct node*)malloc(sizeof(struct node));
        newNode->data=name[0];
        newNode->next=NULL;
        head=newNode;
        prevNode=newNode;
        while(name[i]!='\0')
        {
            newNode=(struct node*)malloc(sizeof(struct node));
            newNode->data=name[i];
            newNode->next=NULL;
            prevNode->next=newNode;
            prevNode=newNode;
            i++;
        }
    }
    else
    {
        struct node* temp=head;
        while(temp->next!=NULL)
            temp=temp->next;
        int i=0;
        prevNode=temp;
        while(name[i]!='\0')
        {
            newNode=(struct node*)malloc(sizeof(struct node));
            newNode->data=name[i];
            newNode->next=NULL;
            prevNode->next=newNode;
            prevNode=newNode;
            i++;
        }
    }
}

void traverseLL()
{
    if(head==NULL)
    {
        printf("Linked List is Empty");
    }
    else
    {
        struct node* temp=head;
        while(temp!=NULL)
        {
            printf("%c",temp->data);
            temp=temp->next;
        }
    }
}

void reverseLL()
{
    struct node *prev=NULL;
    struct node *curr=head;
    struct node *nxt=curr;
    while(nxt!=NULL)
    {
        nxt=nxt->next;
        curr->next=prev;
        prev=curr;
        curr=nxt;
    }
    head=prev;
}

int main()
{
    head=NULL;
    char name[50];

    printf("Enter your name : ");
    gets(name);

    insertIntoLL(name);

    traverseLL();
    printf("\n");
    reverseLL();
    printf("\n");
    traverseLL();
    printf("\n");

    return 0;
}

